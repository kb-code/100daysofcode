// git link: https://gist.github.com/1282c4e88fc615d81e38754380d0afe1

// Returns a random DNA base
const returnRandBase = () => {
  const dnaBases = ['A', 'T', 'C', 'G']
  return dnaBases[Math.floor(Math.random() * 4)] 
}

// Returns a random single stand of DNA containing 15 bases
const mockUpStrand = () => {
  const newStrand = []
  for (let i = 0; i < 15; i++) {
    newStrand.push(returnRandBase())
  }
  return newStrand
}



function pAequorFactory(specNum, dna)  {
  return {
    specimenNum: specNum,
    dna: dna,
    mutate() {
      let mutateBase = Math.floor(Math.random() * 15);
      let newDna = returnRandBase();
      if(this.dna[mutateBase] !== newDna) {
        this.dna[mutateBase] = newDna;
      } else {
        this.mutate();
      }
      return this.dna;
    },
    compareDNA(organism) {
      let sameDNA = 0;

      for (let i = 0; i < 15; i++) {
        if (this.dna[i] === organism.dna[i]) {
            sameDNA++;
        }
      }
      
      sameDNA /= 0.15;
      sameDNA = sameDNA.toFixed(2);
      
      console.log(`Specimen #${this.specimenNum} and specimen #${organism.specimenNum} have ${sameDNA}% DNA in common`);
    },
    willLikelySurvive() {
      let cgVals = [];
      this.dna.forEach(element => { if (element=== 'C' || element === 'G') cgVals.push(element)});
      let cgNum = cgVals.length;
      let survival = cgNum / .15;
      survival = survival.toFixed(2);

      
      if (survival >= 60) {
        console.log(`the number of C and G bases is: ${cgNum} and the percentage is ${survival}%`);
        return true;
      } else {
        return false;
      }
    } //end objects
  }
};


let pAequor = []

for (i = 0; i < 30; i++) {
pAequor[i] = pAequorFactory(i + 1, mockUpStrand());

if (pAequor[i].willLikelySurvive()) {
  console.log(`specimen number: ${pAequor[i].specimenNum}, DNA sequence: `, pAequor[i].dna);
  console.log(' ');
} else {
  i--;
  pAequor[i] = pAequorFactory(i + 1, mockUpStrand());
}
}

console.log(`Mutation alert! Specimen #${pAequor[29].specimenNum} has undergone mutation. Here is the new Gene sequence: `, pAequor[29].mutate());


pAequor[25].compareDNA(pAequor[13]); 
